/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/client/client.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __createBinding, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__createBinding", function() { return __createBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function() { return __spreadArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldGet", function() { return __classPrivateFieldGet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldSet", function() { return __classPrivateFieldSet; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "./src/client/client.ts":
/*!******************************!*\
  !*** ./src/client/client.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
__webpack_require__(/*! ./styles/client.less */ "./src/client/styles/client.less");
/**
 * When page first loads - render and set event handlers
 */
window.addEventListener('load', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e, _f;
    const list = (_a = document.querySelector('.api-list')) !== null && _a !== void 0 ? _a : new HTMLElement();
    renderWebToken();
    renderRouteList();
    // reset button
    list.querySelectorAll('.reset').forEach(element => {
        element.addEventListener('click', (event) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _a, _b;
            const button = event.target;
            if (button.classList.contains('selected')) {
                return;
            }
            const row = button.closest('tr');
            if (row) {
                const config = [{ method: (_a = row.dataset['method']) !== null && _a !== void 0 ? _a : '', url: (_b = row.dataset['url']) !== null && _b !== void 0 ? _b : '' }];
                const response = yield changeSettings(config);
                if (response && response.ok) {
                    updateRouteRowSettings(row);
                    renderRouteRow(row);
                }
            }
        }));
    });
    // status code buttons
    list.querySelectorAll('.button.status').forEach(element => {
        element.addEventListener('click', (event) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _a, _b, _c;
            const button = event.target;
            if (button.classList.contains('selected')) {
                return;
            }
            const row = button.closest('tr');
            if (row) {
                const status = parseInt((_a = button === null || button === void 0 ? void 0 : button.dataset['value']) !== null && _a !== void 0 ? _a : '0');
                const newSettings = Object.assign(JSON.parse((row === null || row === void 0 ? void 0 : row.dataset['settings']) || '{}'), { status });
                const config = [{ method: (_b = row.dataset['method']) !== null && _b !== void 0 ? _b : '', url: (_c = row.dataset['url']) !== null && _c !== void 0 ? _c : '', settings: newSettings }];
                const response = yield changeSettings(config);
                if (response && response.ok) {
                    updateRouteRowSettings(row, newSettings);
                    renderRouteRow(row);
                }
            }
        }));
    });
    // repeat status code
    list.querySelectorAll('.repeat-status').forEach(range => {
        refreshRepeatStatusLabel(range);
        range.addEventListener('change', (e) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _a, _b;
            const input = e.target;
            const row = input.closest('tr');
            if (row) {
                const newSettings = Object.assign(JSON.parse((row === null || row === void 0 ? void 0 : row.dataset['settings']) || '{}'), { requestsBeforeStatusExpires: parseInt(input.value) });
                const config = [{ method: (_a = row.dataset['method']) !== null && _a !== void 0 ? _a : '', url: (_b = row.dataset['url']) !== null && _b !== void 0 ? _b : '', settings: newSettings }];
                const response = yield changeSettings(config);
                if (response && response.ok) {
                    updateRouteRowSettings(row, newSettings);
                    renderRouteRow(row);
                }
            }
        }));
        range.addEventListener('input', (e) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            refreshRepeatStatusLabel(e.target);
        }));
    });
    // load settings from file
    (_b = document.querySelector('.load-settings')) === null || _b === void 0 ? void 0 : _b.addEventListener('click', () => {
        loadSettings();
    });
    // save settings to file
    (_c = document.querySelector('.save-settings')) === null || _c === void 0 ? void 0 : _c.addEventListener('click', () => {
        saveSettings();
    });
    // reset to default settings (no custom settings)
    (_d = document.querySelector('.reset-settings')) === null || _d === void 0 ? void 0 : _d.addEventListener('click', () => {
        resetAllSettings().then(_ => renderRouteList());
    });
    // show the web token
    (_e = document.querySelector('.toggle-web-token')) === null || _e === void 0 ? void 0 : _e.addEventListener('click', () => {
        toggleWebToken();
    });
    // get test data
    (_f = document.querySelector('.toggle-test-data-links')) === null || _f === void 0 ? void 0 : _f.addEventListener('click', () => {
        toggleTestDataLinks();
    });
}));
/**
 * Render the route (API) list
 */
function renderRouteList() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const list = document.querySelector('.api-list');
        const allSettingsResponse = yield getAllSettings();
        if (allSettingsResponse.ok) {
            const routes = yield allSettingsResponse.json();
            routes.forEach((route) => {
                var _a, _b;
                const row = list === null || list === void 0 ? void 0 : list.querySelector(`tr[data-method='${route.method}'][data-url='${route.url}']`);
                if (row) {
                    const range = row.querySelector('.repeat-status');
                    row.querySelectorAll('.button').forEach(button => button.classList.remove('selected'));
                    if (route.settings) {
                        row.querySelectorAll('.button.status').forEach(el => {
                            const statusButton = el;
                            const status = statusButton.dataset['value'];
                            if (status && parseInt(status) === route.settings.status) {
                                statusButton.classList.add('selected');
                            }
                        });
                        range.value = (_a = route.settings.requestsBeforeStatusExpires) !== null && _a !== void 0 ? _a : 0;
                        range.disabled = false;
                    }
                    else {
                        (_b = row.querySelector('.reset')) === null || _b === void 0 ? void 0 : _b.classList.add('selected');
                        range.value = '0';
                        range.disabled = true;
                    }
                    refreshRepeatStatusLabel(range);
                }
            });
        }
    });
}
/**
 * Render route row based on its route settings
 * @param row
 */
function renderRouteRow(row) {
    var _a, _b, _c;
    if (row) {
        const settings = row.dataset['settings'] ? JSON.parse(row.dataset['settings']) : null;
        const range = row.querySelector('.repeat-status');
        (_a = row.querySelector('.reset')) === null || _a === void 0 ? void 0 : _a.classList.remove('selected');
        row.querySelectorAll('.button.status').forEach(button => button.classList.remove('selected'));
        range.value = '0';
        range.disabled = true;
        if (settings) {
            if (settings.status) {
                (_b = row.querySelector(`.button.status[data-value='${settings.status}']`)) === null || _b === void 0 ? void 0 : _b.classList.add('selected');
                range.disabled = false;
            }
            if (settings.requestsBeforeStatusExpires) {
                range.value = settings.requestsBeforeStatusExpires.toString();
            }
        }
        else {
            (_c = row.querySelector('.reset')) === null || _c === void 0 ? void 0 : _c.classList.add('selected');
        }
        refreshRepeatStatusLabel(range);
    }
}
function updateRouteRowSettings(row, settings) {
    if (row) {
        row.dataset['settings'] = settings ? JSON.stringify(settings) : '';
    }
}
/**
 * Get settings of all routes
 */
function getAllSettings() {
    return fetch('/settings', { method: 'GET' });
}
/**
 * Change settings of one or more routes
 * @param method
 * @param url
 * @param settings
 */
function changeSettings(config) {
    return fetch('/settings', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: new Blob([JSON.stringify(config)]) });
}
/**
 * Load route settings from file
 */
function loadSettings() {
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.accept = '.json';
    fileInput.addEventListener('change', (event) => {
        loadFile(event);
    });
    fileInput.click();
}
/**
 * Save route settings to file
 */
function saveSettings() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const response = yield getAllSettings();
        if (response.ok) {
            const allSettings = yield response.json();
            const customSettings = allSettings.filter(route => route.settings);
            const a = document.createElement('a');
            a.href = `data:application/json,${JSON.stringify(customSettings)}`;
            a.download = 'mock-server-settings.json';
            a.click();
        }
    });
}
/**
 * Reset all route settings
 */
function resetAllSettings() {
    return fetch('/settings/reset', { method: 'PUT' });
}
function loadFile(event) {
    const files = event.target.files;
    if (files.length) {
        const file = files[0];
        const reader = new FileReader();
        if (file.type === 'application/json') {
            reader.addEventListener('load', (e) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                var _a;
                const result = (_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.result;
                yield resetAllSettings();
                yield changeSettings(JSON.parse(result));
                renderRouteList();
            }));
            reader.readAsText(file);
        }
        else {
            alert('Not a JSON file');
        }
    }
}
function refreshRepeatStatusLabel(range) {
    var _a;
    const label = (_a = range.closest('td')) === null || _a === void 0 ? void 0 : _a.querySelector('.repeat-status-label');
    label.innerText = range.value;
}
function renderWebToken() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const webTokenField = document.querySelector('.web-token');
        const response = yield fetch('/api/test/token', { method: 'GET' });
        webTokenField.value = yield response.text();
    });
}
function toggleWebToken() {
    const panel = document.querySelector('.web-token');
    panel.classList.toggle('not-displayed');
}
function toggleTestDataLinks() {
    const panel = document.querySelector('.test-data-links');
    panel.classList.toggle('not-displayed');
}


/***/ }),

/***/ "./src/client/styles/client.less":
/*!***************************************!*\
  !*** ./src/client/styles/client.less ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,