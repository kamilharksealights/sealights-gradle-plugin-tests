"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockRoutes = void 0;
var http_status_codes_1 = __importDefault(require("http-status-codes"));
var path_to_regexp_1 = require("path-to-regexp");
var url_1 = require("url");
var ROUTES = require('./data/routes.json');
var POPULAR_STATUS_CODES = [
    http_status_codes_1.default.OK,
    http_status_codes_1.default.CREATED,
    http_status_codes_1.default.BAD_REQUEST,
    http_status_codes_1.default.UNAUTHORIZED,
    http_status_codes_1.default.CONFLICT,
    http_status_codes_1.default.NOT_FOUND,
    http_status_codes_1.default.SERVICE_UNAVAILABLE,
    http_status_codes_1.default.GATEWAY_TIMEOUT
].sort();
var ALL_STATUS_CODES = Object.values(http_status_codes_1.default).filter(function (value) { return typeof value === 'number'; }).sort();
var resetRoutes = function () {
    ROUTES.forEach(function (route) { return delete route.settings; });
};
var isRouteConfigured = function (method, url) {
    var routeSettings = ROUTES.find(function (item) { return item.method === method && item.url === url; });
    console.log('routes.ts/isRouteConfigured/routeSettings:', routeSettings);
    if (routeSettings) {
        return routeSettings.settings !== undefined && routeSettings.settings !== null;
    }
    return false;
};
var getRoute = function (method, url) {
    var route = ROUTES.find(function (item) { return item.method === method && item.url === url; });
    return route !== null && route !== void 0 ? route : null;
};
var getRouteSettings = function (method, req) {
    var route = ROUTES.find(function (item) {
        var parsedUrl = url_1.parse(req.url).pathname;
        var matcher = path_to_regexp_1.match(item.url);
        var result = matcher(parsedUrl);
        return item.method === method && result;
    });
    if (route && route.settings) {
        return route.settings;
    }
    return null;
};
var configureRoute = function (route, settings) {
    if (settings === null || settings === void 0 ? void 0 : settings.status) {
        var newSettings = {
            status: settings.status,
            requestsBeforeStatusExpires: settings.requestsBeforeStatusExpires,
            requestIndex: 0
        };
        route.settings = newSettings;
    }
    else {
        delete route.settings;
    }
};
var MockRoutes = { ROUTES: ROUTES, POPULAR_STATUS_CODES: POPULAR_STATUS_CODES, ALL_STATUS_CODES: ALL_STATUS_CODES, resetRoutes: resetRoutes, isRouteConfigured: isRouteConfigured, getRoute: getRoute, getRouteSettings: getRouteSettings, configureRoute: configureRoute };
exports.MockRoutes = MockRoutes;
